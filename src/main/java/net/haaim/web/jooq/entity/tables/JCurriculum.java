/*
 * This file is generated by jOOQ.
 */
package net.haaim.web.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.haaim.web.jooq.entity.JHaaimDb;
import net.haaim.web.jooq.entity.Keys;
import net.haaim.web.jooq.entity.tables.records.JCurriculumRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 커리큘럼
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCurriculum extends TableImpl<JCurriculumRecord> {

    private static final long serialVersionUID = -1795640058;

    /**
     * The reference instance of <code>haaim_db.curriculum</code>
     */
    public static final JCurriculum CURRICULUM = new JCurriculum();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCurriculumRecord> getRecordType() {
        return JCurriculumRecord.class;
    }

    /**
     * The column <code>haaim_db.curriculum.no</code>.
     */
    public final TableField<JCurriculumRecord, Integer> NO = createField(DSL.name("no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>haaim_db.curriculum.year</code>.
     */
    public final TableField<JCurriculumRecord, Integer> YEAR = createField(DSL.name("year"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.curriculum.grade</code>. 학년
     */
    public final TableField<JCurriculumRecord, Integer> GRADE = createField(DSL.name("grade"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "학년");

    /**
     * The column <code>haaim_db.curriculum.course</code>. 학기/과정
     */
    public final TableField<JCurriculumRecord, Integer> COURSE = createField(DSL.name("course"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "학기/과정");

    /**
     * The column <code>haaim_db.curriculum.large_category</code>. 대분류
     */
    public final TableField<JCurriculumRecord, String> LARGE_CATEGORY = createField(DSL.name("large_category"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "대분류");

    /**
     * The column <code>haaim_db.curriculum.medium_category</code>. 중분류
     */
    public final TableField<JCurriculumRecord, String> MEDIUM_CATEGORY = createField(DSL.name("medium_category"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "중분류");

    /**
     * The column <code>haaim_db.curriculum.input_id</code>.
     */
    public final TableField<JCurriculumRecord, String> INPUT_ID = createField(DSL.name("input_id"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>haaim_db.curriculum.input_date</code>.
     */
    public final TableField<JCurriculumRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>haaim_db.curriculum.update_id</code>.
     */
    public final TableField<JCurriculumRecord, String> UPDATE_ID = createField(DSL.name("update_id"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>haaim_db.curriculum.update_date</code>.
     */
    public final TableField<JCurriculumRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>haaim_db.curriculum</code> table reference
     */
    public JCurriculum() {
        this(DSL.name("curriculum"), null);
    }

    /**
     * Create an aliased <code>haaim_db.curriculum</code> table reference
     */
    public JCurriculum(String alias) {
        this(DSL.name(alias), CURRICULUM);
    }

    /**
     * Create an aliased <code>haaim_db.curriculum</code> table reference
     */
    public JCurriculum(Name alias) {
        this(alias, CURRICULUM);
    }

    private JCurriculum(Name alias, Table<JCurriculumRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCurriculum(Name alias, Table<JCurriculumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("커리큘럼"), TableOptions.table());
    }

    public <O extends Record> JCurriculum(Table<O> child, ForeignKey<O, JCurriculumRecord> key) {
        super(child, key, CURRICULUM);
    }

    @Override
    public Schema getSchema() {
        return JHaaimDb.HAAIM_DB;
    }

    @Override
    public Identity<JCurriculumRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CURRICULUM;
    }

    @Override
    public UniqueKey<JCurriculumRecord> getPrimaryKey() {
        return Keys.KEY_CURRICULUM_PRIMARY;
    }

    @Override
    public List<UniqueKey<JCurriculumRecord>> getKeys() {
        return Arrays.<UniqueKey<JCurriculumRecord>>asList(Keys.KEY_CURRICULUM_PRIMARY);
    }

    @Override
    public JCurriculum as(String alias) {
        return new JCurriculum(DSL.name(alias), this);
    }

    @Override
    public JCurriculum as(Name alias) {
        return new JCurriculum(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCurriculum rename(String name) {
        return new JCurriculum(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCurriculum rename(Name name) {
        return new JCurriculum(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, Integer, Integer, String, String, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
