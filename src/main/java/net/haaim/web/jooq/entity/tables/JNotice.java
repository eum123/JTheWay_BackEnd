/*
 * This file is generated by jOOQ.
 */
package net.haaim.web.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.haaim.web.jooq.entity.JHaaimDb;
import net.haaim.web.jooq.entity.Keys;
import net.haaim.web.jooq.entity.tables.records.JNoticeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 공지사항
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JNotice extends TableImpl<JNoticeRecord> {

    private static final long serialVersionUID = 1291775847;

    /**
     * The reference instance of <code>haaim_db.notice</code>
     */
    public static final JNotice NOTICE = new JNotice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JNoticeRecord> getRecordType() {
        return JNoticeRecord.class;
    }

    /**
     * The column <code>haaim_db.notice.no</code>.
     */
    public final TableField<JNoticeRecord, Integer> NO = createField(DSL.name("no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>haaim_db.notice.title</code>. 제목
     */
    public final TableField<JNoticeRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "제목");

    /**
     * The column <code>haaim_db.notice.contents</code>. 내용
     */
    public final TableField<JNoticeRecord, String> CONTENTS = createField(DSL.name("contents"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "내용");

    /**
     * The column <code>haaim_db.notice.state</code>. 상태(0:HIDDEN/1:VIEW)
     */
    public final TableField<JNoticeRecord, Integer> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.INTEGER, this, "상태(0:HIDDEN/1:VIEW)");

    /**
     * The column <code>haaim_db.notice.input_id</code>.
     */
    public final TableField<JNoticeRecord, String> INPUT_ID = createField(DSL.name("input_id"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>haaim_db.notice.input_date</code>.
     */
    public final TableField<JNoticeRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>haaim_db.notice.update_id</code>.
     */
    public final TableField<JNoticeRecord, String> UPDATE_ID = createField(DSL.name("update_id"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>haaim_db.notice.update_date</code>.
     */
    public final TableField<JNoticeRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>haaim_db.notice</code> table reference
     */
    public JNotice() {
        this(DSL.name("notice"), null);
    }

    /**
     * Create an aliased <code>haaim_db.notice</code> table reference
     */
    public JNotice(String alias) {
        this(DSL.name(alias), NOTICE);
    }

    /**
     * Create an aliased <code>haaim_db.notice</code> table reference
     */
    public JNotice(Name alias) {
        this(alias, NOTICE);
    }

    private JNotice(Name alias, Table<JNoticeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JNotice(Name alias, Table<JNoticeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("공지사항"), TableOptions.table());
    }

    public <O extends Record> JNotice(Table<O> child, ForeignKey<O, JNoticeRecord> key) {
        super(child, key, NOTICE);
    }

    @Override
    public Schema getSchema() {
        return JHaaimDb.HAAIM_DB;
    }

    @Override
    public Identity<JNoticeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_NOTICE;
    }

    @Override
    public UniqueKey<JNoticeRecord> getPrimaryKey() {
        return Keys.KEY_NOTICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<JNoticeRecord>> getKeys() {
        return Arrays.<UniqueKey<JNoticeRecord>>asList(Keys.KEY_NOTICE_PRIMARY);
    }

    @Override
    public JNotice as(String alias) {
        return new JNotice(DSL.name(alias), this);
    }

    @Override
    public JNotice as(Name alias) {
        return new JNotice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JNotice rename(String name) {
        return new JNotice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JNotice rename(Name name) {
        return new JNotice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Integer, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
