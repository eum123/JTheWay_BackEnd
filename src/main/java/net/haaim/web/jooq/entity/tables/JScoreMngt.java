/*
 * This file is generated by jOOQ.
 */
package net.haaim.web.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.haaim.web.jooq.entity.JHaaimDb;
import net.haaim.web.jooq.entity.Keys;
import net.haaim.web.jooq.entity.tables.records.JScoreMngtRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 시험점수관리(중간/기말/모의고사/수능점수)
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JScoreMngt extends TableImpl<JScoreMngtRecord> {

    private static final long serialVersionUID = 234371576;

    /**
     * The reference instance of <code>haaim_db.score_mngt</code>
     */
    public static final JScoreMngt SCORE_MNGT = new JScoreMngt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JScoreMngtRecord> getRecordType() {
        return JScoreMngtRecord.class;
    }

    /**
     * The column <code>haaim_db.score_mngt.no</code>.
     */
    public final TableField<JScoreMngtRecord, Integer> NO = createField(DSL.name("no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>haaim_db.score_mngt.year</code>.
     */
    public final TableField<JScoreMngtRecord, Integer> YEAR = createField(DSL.name("year"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.score_mngt.student_no</code>.
     */
    public final TableField<JScoreMngtRecord, Integer> STUDENT_NO = createField(DSL.name("student_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.score_mngt.term</code>. 학기, 기간
     */
    public final TableField<JScoreMngtRecord, String> TERM = createField(DSL.name("term"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "학기, 기간");

    /**
     * The column <code>haaim_db.score_mngt.exam</code>. 시험 (midterm exam / finals / mock test / sat)
     */
    public final TableField<JScoreMngtRecord, String> EXAM = createField(DSL.name("exam"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "시험 (midterm exam / finals / mock test / sat)");

    /**
     * The column <code>haaim_db.score_mngt.score</code>. 점수
     */
    public final TableField<JScoreMngtRecord, String> SCORE = createField(DSL.name("score"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "점수");

    /**
     * The column <code>haaim_db.score_mngt.description</code>.
     */
    public final TableField<JScoreMngtRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>haaim_db.score_mngt.input_id</code>.
     */
    public final TableField<JScoreMngtRecord, String> INPUT_ID = createField(DSL.name("input_id"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>haaim_db.score_mngt.input_date</code>.
     */
    public final TableField<JScoreMngtRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>haaim_db.score_mngt.update_id</code>.
     */
    public final TableField<JScoreMngtRecord, String> UPDATE_ID = createField(DSL.name("update_id"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>haaim_db.score_mngt.update_date</code>.
     */
    public final TableField<JScoreMngtRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>haaim_db.score_mngt</code> table reference
     */
    public JScoreMngt() {
        this(DSL.name("score_mngt"), null);
    }

    /**
     * Create an aliased <code>haaim_db.score_mngt</code> table reference
     */
    public JScoreMngt(String alias) {
        this(DSL.name(alias), SCORE_MNGT);
    }

    /**
     * Create an aliased <code>haaim_db.score_mngt</code> table reference
     */
    public JScoreMngt(Name alias) {
        this(alias, SCORE_MNGT);
    }

    private JScoreMngt(Name alias, Table<JScoreMngtRecord> aliased) {
        this(alias, aliased, null);
    }

    private JScoreMngt(Name alias, Table<JScoreMngtRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("시험점수관리(중간/기말/모의고사/수능점수)"), TableOptions.table());
    }

    public <O extends Record> JScoreMngt(Table<O> child, ForeignKey<O, JScoreMngtRecord> key) {
        super(child, key, SCORE_MNGT);
    }

    @Override
    public Schema getSchema() {
        return JHaaimDb.HAAIM_DB;
    }

    @Override
    public Identity<JScoreMngtRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCORE_MNGT;
    }

    @Override
    public UniqueKey<JScoreMngtRecord> getPrimaryKey() {
        return Keys.KEY_SCORE_MNGT_PRIMARY;
    }

    @Override
    public List<UniqueKey<JScoreMngtRecord>> getKeys() {
        return Arrays.<UniqueKey<JScoreMngtRecord>>asList(Keys.KEY_SCORE_MNGT_PRIMARY);
    }

    @Override
    public JScoreMngt as(String alias) {
        return new JScoreMngt(DSL.name(alias), this);
    }

    @Override
    public JScoreMngt as(Name alias) {
        return new JScoreMngt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JScoreMngt rename(String name) {
        return new JScoreMngt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JScoreMngt rename(Name name) {
        return new JScoreMngt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Integer, String, String, String, String, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
