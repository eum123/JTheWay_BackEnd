/*
 * This file is generated by jOOQ.
 */
package net.haaim.web.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.haaim.web.jooq.entity.JHaaimDb;
import net.haaim.web.jooq.entity.Keys;
import net.haaim.web.jooq.entity.tables.records.JItemPoolRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 문제은행
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JItemPool extends TableImpl<JItemPoolRecord> {

    private static final long serialVersionUID = 1857953035;

    /**
     * The reference instance of <code>haaim_db.item_pool</code>
     */
    public static final JItemPool ITEM_POOL = new JItemPool();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JItemPoolRecord> getRecordType() {
        return JItemPoolRecord.class;
    }

    /**
     * The column <code>haaim_db.item_pool.item_no</code>.
     */
    public final TableField<JItemPoolRecord, Integer> ITEM_NO = createField(DSL.name("item_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>haaim_db.item_pool.year</code>.
     */
    public final TableField<JItemPoolRecord, Integer> YEAR = createField(DSL.name("year"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.item_pool.grade</code>.
     */
    public final TableField<JItemPoolRecord, Integer> GRADE = createField(DSL.name("grade"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.item_pool.course</code>.
     */
    public final TableField<JItemPoolRecord, Integer> COURSE = createField(DSL.name("course"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.item_pool.medium_category</code>. 중분류코드
     */
    public final TableField<JItemPoolRecord, String> MEDIUM_CATEGORY = createField(DSL.name("medium_category"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "중분류코드");

    /**
     * The column <code>haaim_db.item_pool.type_group</code>. 유형그룹
     */
    public final TableField<JItemPoolRecord, String> TYPE_GROUP = createField(DSL.name("type_group"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "유형그룹");

    /**
     * The column <code>haaim_db.item_pool.type</code>. 유형
     */
    public final TableField<JItemPoolRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "유형");

    /**
     * The column <code>haaim_db.item_pool.question_type</code>. 문제형태(객관식/주관식)
     */
    public final TableField<JItemPoolRecord, Integer> QUESTION_TYPE = createField(DSL.name("question_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "문제형태(객관식/주관식)");

    /**
     * The column <code>haaim_db.item_pool.question</code>.
     */
    public final TableField<JItemPoolRecord, String> QUESTION = createField(DSL.name("question"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>haaim_db.item_pool.choice1</code>. 객관식 보기1
     */
    public final TableField<JItemPoolRecord, String> CHOICE1 = createField(DSL.name("choice1"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "객관식 보기1");

    /**
     * The column <code>haaim_db.item_pool.choice2</code>. 객관식 보기2
     */
    public final TableField<JItemPoolRecord, String> CHOICE2 = createField(DSL.name("choice2"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "객관식 보기2");

    /**
     * The column <code>haaim_db.item_pool.choice3</code>. 객관식 보기3
     */
    public final TableField<JItemPoolRecord, String> CHOICE3 = createField(DSL.name("choice3"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "객관식 보기3");

    /**
     * The column <code>haaim_db.item_pool.choice4</code>. 객관식 보기4
     */
    public final TableField<JItemPoolRecord, String> CHOICE4 = createField(DSL.name("choice4"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "객관식 보기4");

    /**
     * The column <code>haaim_db.item_pool.choice5</code>. 객관식 보기5
     */
    public final TableField<JItemPoolRecord, String> CHOICE5 = createField(DSL.name("choice5"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "객관식 보기5");

    /**
     * The column <code>haaim_db.item_pool.file_path</code>.
     */
    public final TableField<JItemPoolRecord, String> FILE_PATH = createField(DSL.name("file_path"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>haaim_db.item_pool.mark_type</code>. 채점 방법(자동/수동)
     */
    public final TableField<JItemPoolRecord, Integer> MARK_TYPE = createField(DSL.name("mark_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "채점 방법(자동/수동)");

    /**
     * The column <code>haaim_db.item_pool.answer</code>. 주관식 답
     */
    public final TableField<JItemPoolRecord, String> ANSWER = createField(DSL.name("answer"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "주관식 답");

    /**
     * The column <code>haaim_db.item_pool.answer_path</code>. 주관식 답 image
     */
    public final TableField<JItemPoolRecord, String> ANSWER_PATH = createField(DSL.name("answer_path"), org.jooq.impl.SQLDataType.VARCHAR(500), this, "주관식 답 image");

    /**
     * The column <code>haaim_db.item_pool.publisher</code>. 출판사
     */
    public final TableField<JItemPoolRecord, String> PUBLISHER = createField(DSL.name("publisher"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "출판사");

    /**
     * The column <code>haaim_db.item_pool.workbook</code>. 문제집
     */
    public final TableField<JItemPoolRecord, String> WORKBOOK = createField(DSL.name("workbook"), org.jooq.impl.SQLDataType.VARCHAR(300), this, "문제집");

    /**
     * The column <code>haaim_db.item_pool.level_difficulty</code>. 난이도
     */
    public final TableField<JItemPoolRecord, Integer> LEVEL_DIFFICULTY = createField(DSL.name("level_difficulty"), org.jooq.impl.SQLDataType.INTEGER, this, "난이도");

    /**
     * The column <code>haaim_db.item_pool.use_yn</code>. 사용여부
     */
    public final TableField<JItemPoolRecord, Integer> USE_YN = createField(DSL.name("use_yn"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "사용여부");

    /**
     * The column <code>haaim_db.item_pool.input_id</code>.
     */
    public final TableField<JItemPoolRecord, String> INPUT_ID = createField(DSL.name("input_id"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>haaim_db.item_pool.input_date</code>.
     */
    public final TableField<JItemPoolRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>haaim_db.item_pool.update_id</code>.
     */
    public final TableField<JItemPoolRecord, String> UPDATE_ID = createField(DSL.name("update_id"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>haaim_db.item_pool.update_date</code>.
     */
    public final TableField<JItemPoolRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>haaim_db.item_pool</code> table reference
     */
    public JItemPool() {
        this(DSL.name("item_pool"), null);
    }

    /**
     * Create an aliased <code>haaim_db.item_pool</code> table reference
     */
    public JItemPool(String alias) {
        this(DSL.name(alias), ITEM_POOL);
    }

    /**
     * Create an aliased <code>haaim_db.item_pool</code> table reference
     */
    public JItemPool(Name alias) {
        this(alias, ITEM_POOL);
    }

    private JItemPool(Name alias, Table<JItemPoolRecord> aliased) {
        this(alias, aliased, null);
    }

    private JItemPool(Name alias, Table<JItemPoolRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("문제은행"), TableOptions.table());
    }

    public <O extends Record> JItemPool(Table<O> child, ForeignKey<O, JItemPoolRecord> key) {
        super(child, key, ITEM_POOL);
    }

    @Override
    public Schema getSchema() {
        return JHaaimDb.HAAIM_DB;
    }

    @Override
    public Identity<JItemPoolRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ITEM_POOL;
    }

    @Override
    public UniqueKey<JItemPoolRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_POOL_PRIMARY;
    }

    @Override
    public List<UniqueKey<JItemPoolRecord>> getKeys() {
        return Arrays.<UniqueKey<JItemPoolRecord>>asList(Keys.KEY_ITEM_POOL_PRIMARY);
    }

    @Override
    public JItemPool as(String alias) {
        return new JItemPool(DSL.name(alias), this);
    }

    @Override
    public JItemPool as(Name alias) {
        return new JItemPool(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JItemPool rename(String name) {
        return new JItemPool(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JItemPool rename(Name name) {
        return new JItemPool(name, null);
    }
}
