/*
 * This file is generated by jOOQ.
 */
package net.haaim.web.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.haaim.web.jooq.entity.JHaaimDb;
import net.haaim.web.jooq.entity.Keys;
import net.haaim.web.jooq.entity.tables.records.JStudentInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 학생정보
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JStudentInfo extends TableImpl<JStudentInfoRecord> {

    private static final long serialVersionUID = -395017016;

    /**
     * The reference instance of <code>haaim_db.student_info</code>
     */
    public static final JStudentInfo STUDENT_INFO = new JStudentInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JStudentInfoRecord> getRecordType() {
        return JStudentInfoRecord.class;
    }

    /**
     * The column <code>haaim_db.student_info.student_no</code>.
     */
    public final TableField<JStudentInfoRecord, Integer> STUDENT_NO = createField(DSL.name("student_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.student_info.name</code>.
     */
    public final TableField<JStudentInfoRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>haaim_db.student_info.birth</code>. 생년월일
     */
    public final TableField<JStudentInfoRecord, String> BIRTH = createField(DSL.name("birth"), org.jooq.impl.SQLDataType.VARCHAR(8), this, "생년월일");

    /**
     * The column <code>haaim_db.student_info.mobile</code>. 연락처
     */
    public final TableField<JStudentInfoRecord, String> MOBILE = createField(DSL.name("mobile"), org.jooq.impl.SQLDataType.VARCHAR(15).nullable(false), this, "연락처");

    /**
     * The column <code>haaim_db.student_info.email</code>.
     */
    public final TableField<JStudentInfoRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>haaim_db.student_info.father_mobile</code>. 아버지연락처
     */
    public final TableField<JStudentInfoRecord, String> FATHER_MOBILE = createField(DSL.name("father_mobile"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "아버지연락처");

    /**
     * The column <code>haaim_db.student_info.mother_mobile</code>. 어머니연락처
     */
    public final TableField<JStudentInfoRecord, String> MOTHER_MOBILE = createField(DSL.name("mother_mobile"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "어머니연락처");

    /**
     * The column <code>haaim_db.student_info.input_id</code>.
     */
    public final TableField<JStudentInfoRecord, String> INPUT_ID = createField(DSL.name("input_id"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>haaim_db.student_info.input_date</code>.
     */
    public final TableField<JStudentInfoRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>haaim_db.student_info.update_id</code>.
     */
    public final TableField<JStudentInfoRecord, String> UPDATE_ID = createField(DSL.name("update_id"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>haaim_db.student_info.update_date</code>.
     */
    public final TableField<JStudentInfoRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>haaim_db.student_info</code> table reference
     */
    public JStudentInfo() {
        this(DSL.name("student_info"), null);
    }

    /**
     * Create an aliased <code>haaim_db.student_info</code> table reference
     */
    public JStudentInfo(String alias) {
        this(DSL.name(alias), STUDENT_INFO);
    }

    /**
     * Create an aliased <code>haaim_db.student_info</code> table reference
     */
    public JStudentInfo(Name alias) {
        this(alias, STUDENT_INFO);
    }

    private JStudentInfo(Name alias, Table<JStudentInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private JStudentInfo(Name alias, Table<JStudentInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("학생정보"), TableOptions.table());
    }

    public <O extends Record> JStudentInfo(Table<O> child, ForeignKey<O, JStudentInfoRecord> key) {
        super(child, key, STUDENT_INFO);
    }

    @Override
    public Schema getSchema() {
        return JHaaimDb.HAAIM_DB;
    }

    @Override
    public UniqueKey<JStudentInfoRecord> getPrimaryKey() {
        return Keys.KEY_STUDENT_INFO_PRIMARY;
    }

    @Override
    public List<UniqueKey<JStudentInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<JStudentInfoRecord>>asList(Keys.KEY_STUDENT_INFO_PRIMARY);
    }

    @Override
    public JStudentInfo as(String alias) {
        return new JStudentInfo(DSL.name(alias), this);
    }

    @Override
    public JStudentInfo as(Name alias) {
        return new JStudentInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStudentInfo rename(String name) {
        return new JStudentInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStudentInfo rename(Name name) {
        return new JStudentInfo(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, String, String, String, String, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
