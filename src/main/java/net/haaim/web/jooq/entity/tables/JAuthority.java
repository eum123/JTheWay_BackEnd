/*
 * This file is generated by jOOQ.
 */
package net.haaim.web.jooq.entity.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import net.haaim.web.jooq.entity.JHaaimDb;
import net.haaim.web.jooq.entity.Keys;
import net.haaim.web.jooq.entity.tables.records.JAuthorityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 메뉴권한관리
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JAuthority extends TableImpl<JAuthorityRecord> {

    private static final long serialVersionUID = -1939734669;

    /**
     * The reference instance of <code>haaim_db.authority</code>
     */
    public static final JAuthority AUTHORITY = new JAuthority();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JAuthorityRecord> getRecordType() {
        return JAuthorityRecord.class;
    }

    /**
     * The column <code>haaim_db.authority.menu_code</code>. 메뉴코드
     */
    public final TableField<JAuthorityRecord, String> MENU_CODE = createField(DSL.name("menu_code"), org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "메뉴코드");

    /**
     * The column <code>haaim_db.authority.user_type</code>. 사용자권한
     */
    public final TableField<JAuthorityRecord, Integer> USER_TYPE = createField(DSL.name("user_type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "사용자권한");

    /**
     * The column <code>haaim_db.authority.use_yn</code>.
     */
    public final TableField<JAuthorityRecord, Integer> USE_YN = createField(DSL.name("use_yn"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>haaim_db.authority.input_id</code>.
     */
    public final TableField<JAuthorityRecord, String> INPUT_ID = createField(DSL.name("input_id"), org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>haaim_db.authority.input_date</code>.
     */
    public final TableField<JAuthorityRecord, LocalDateTime> INPUT_DATE = createField(DSL.name("input_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>haaim_db.authority.update_id</code>.
     */
    public final TableField<JAuthorityRecord, String> UPDATE_ID = createField(DSL.name("update_id"), org.jooq.impl.SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>haaim_db.authority.update_date</code>.
     */
    public final TableField<JAuthorityRecord, LocalDateTime> UPDATE_DATE = createField(DSL.name("update_date"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>haaim_db.authority</code> table reference
     */
    public JAuthority() {
        this(DSL.name("authority"), null);
    }

    /**
     * Create an aliased <code>haaim_db.authority</code> table reference
     */
    public JAuthority(String alias) {
        this(DSL.name(alias), AUTHORITY);
    }

    /**
     * Create an aliased <code>haaim_db.authority</code> table reference
     */
    public JAuthority(Name alias) {
        this(alias, AUTHORITY);
    }

    private JAuthority(Name alias, Table<JAuthorityRecord> aliased) {
        this(alias, aliased, null);
    }

    private JAuthority(Name alias, Table<JAuthorityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("메뉴권한관리"), TableOptions.table());
    }

    public <O extends Record> JAuthority(Table<O> child, ForeignKey<O, JAuthorityRecord> key) {
        super(child, key, AUTHORITY);
    }

    @Override
    public Schema getSchema() {
        return JHaaimDb.HAAIM_DB;
    }

    @Override
    public UniqueKey<JAuthorityRecord> getPrimaryKey() {
        return Keys.KEY_AUTHORITY_PRIMARY;
    }

    @Override
    public List<UniqueKey<JAuthorityRecord>> getKeys() {
        return Arrays.<UniqueKey<JAuthorityRecord>>asList(Keys.KEY_AUTHORITY_PRIMARY);
    }

    @Override
    public JAuthority as(String alias) {
        return new JAuthority(DSL.name(alias), this);
    }

    @Override
    public JAuthority as(Name alias) {
        return new JAuthority(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAuthority rename(String name) {
        return new JAuthority(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAuthority rename(Name name) {
        return new JAuthority(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, Integer, String, LocalDateTime, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
